# Generated by Django 4.0 on 2025-05-19 10:18

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import mptt.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', models.CharField(blank=True, max_length=50, null=True, verbose_name='电话')),
                ('wechat_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='微信ID')),
                ('feishu_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='飞书ID')),
                ('enterprise_wechat_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='企业微信ID')),
                ('role', models.CharField(choices=[('customer', '客户'), ('support', '技术支持'), ('technical_support_admin', '技术支持Admin'), ('system_admin', '系统管理员')], default='customer', max_length=30, verbose_name='角色')),
            ],
            options={
                'verbose_name': '用户',
                'verbose_name_plural': '用户',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='公司名称')),
                ('code', models.CharField(max_length=50, unique=True, verbose_name='公司代码')),
                ('contact_person', models.CharField(blank=True, max_length=255, null=True, verbose_name='联系人')),
                ('contact_email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='联系邮箱')),
                ('contact_phone', models.CharField(blank=True, max_length=50, null=True, verbose_name='联系电话')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否激活')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('professional_services', models.CharField(choices=[('yes', '有'), ('no', '无')], default='no', max_length=20, verbose_name='专业服务')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='company_logos/', verbose_name='公司Logo')),
                ('products', models.CharField(blank=True, choices=[('perpetual_tms', '永久TMS'), ('subscription_tms', '订阅TMS'), ('cloud', 'cloud'), ('tp', 'TP'), ('trial_tms', '试用TMS'), ('desktop_pm', '单机版PM'), ('desktop_pro', '单机版Pro')], max_length=50, null=True, verbose_name='客户产品')),
                ('importance', models.CharField(choices=[('vip', 'VIP'), ('priority', '优先'), ('normal', '普通')], default='normal', max_length=20, verbose_name='客户重要性')),
                ('sso_configs', models.JSONField(blank=True, default=dict, null=True, verbose_name='单点登录配置')),
                ('ticket_submission_url_slug', models.SlugField(blank=True, max_length=100, null=True, unique=True, verbose_name='工单提交URL标识')),
                ('login_background', models.ImageField(blank=True, null=True, upload_to='company_backgrounds/', verbose_name='登录页面背景图')),
                ('email_config', models.JSONField(blank=True, default=dict, null=True, verbose_name='邮件系统配置')),
            ],
            options={
                'verbose_name': '公司',
                'verbose_name_plural': '公司',
            },
        ),
        migrations.CreateModel(
            name='CustomerTypeTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
            ],
            options={
                'verbose_name': '客户类型标签',
                'verbose_name_plural': '客户类型标签',
            },
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='标题')),
                ('description', models.TextField(verbose_name='描述')),
                ('status', models.CharField(choices=[('new_issue', '新问题'), ('pending_assignment', '待分配'), ('in_progress', '处理中'), ('waiting_for_customer', '等待客户回复'), ('resolved', '已解决'), ('closed', '已关闭'), ('customer_follow_up', '追问'), ('paused', '暂停')], default='new_issue', max_length=30, verbose_name='状态')),
                ('priority', models.IntegerField(default=3, verbose_name='优先级 (系统)')),
                ('urgency', models.IntegerField(choices=[(1, '紧急'), (2, '高'), (3, '中'), (4, '低')], default=3, verbose_name='紧急度 (用户/支持设定)')),
                ('category', models.CharField(blank=True, max_length=100, null=True, verbose_name='类别')),
                ('subcategory', models.CharField(blank=True, max_length=100, null=True, verbose_name='子类别')),
                ('contact_method', models.CharField(choices=[('email', '邮箱'), ('wechat', '微信'), ('enterprise_wechat', '企业微信'), ('feishu', '飞书'), ('phone', '电话')], default='email', max_length=30, verbose_name='联系方式')),
                ('contact_info', models.CharField(blank=True, max_length=255, null=True, verbose_name='联系信息')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_activity_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='最后活动时间')),
                ('first_replied_at', models.DateTimeField(blank=True, null=True, verbose_name='首次回复时间')),
                ('resolved_at', models.DateTimeField(blank=True, null=True, verbose_name='解决时间')),
                ('closed_at', models.DateTimeField(blank=True, null=True, verbose_name='关闭时间')),
                ('paused_at', models.DateTimeField(blank=True, null=True, verbose_name='暂停时间')),
                ('pause_reason', models.TextField(blank=True, null=True, verbose_name='暂停原因')),
                ('closing_reason_type', models.CharField(blank=True, choices=[('customer_completed', '客户已完成'), ('on_hold', '暂时挂起'), ('bug_report', 'bug'), ('feature_request', '新需求'), ('other', '其他')], max_length=50, null=True, verbose_name='关闭原因类型')),
                ('closing_reason_detail', models.TextField(blank=True, max_length=100, null=True, verbose_name='关闭原因详情')),
                ('ticket_url_slug', models.SlugField(blank=True, max_length=100, null=True, unique=True, verbose_name='工单URL标识')),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_tickets', to='memoq_ticket_system.user', verbose_name='负责人')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tickets', to='memoq_ticket_system.company', verbose_name='所属公司')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_tickets', to='memoq_ticket_system.user', verbose_name='创建人')),
                ('followers', models.ManyToManyField(blank=True, related_name='following_tickets', to=settings.AUTH_USER_MODEL, verbose_name='关注人')),
            ],
            options={
                'verbose_name': '工单',
                'verbose_name_plural': '工单',
            },
        ),
        migrations.CreateModel(
            name='TicketLabel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='标签名称')),
                ('color', models.CharField(default='#3f51b5', max_length=20, verbose_name='标签颜色')),
                ('description', models.CharField(blank=True, max_length=255, null=True, verbose_name='标签描述')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': '工单标签',
                'verbose_name_plural': '工单标签',
            },
        ),
        migrations.CreateModel(
            name='WebhookTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('ticket_created', '工单创建'), ('ticket_status_changed', '工单状态变更'), ('support_replied', '技术支持回复'), ('customer_followed_up', '客户追问'), ('ticket_transferred', '工单转移'), ('ticket_paused', '工单暂停')], max_length=50, verbose_name='事件类型')),
                ('url_template', models.URLField(max_length=500, verbose_name='URL模板')),
                ('payload_template', models.JSONField(verbose_name='Payload模板 (JSON)')),
                ('headers_template', models.JSONField(blank=True, null=True, verbose_name='Headers模板 (JSON)')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否激活')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='webhook_templates', to='memoq_ticket_system.company', verbose_name='公司')),
            ],
            options={
                'verbose_name': 'Webhook模板',
                'verbose_name_plural': 'Webhook模板',
            },
        ),
        migrations.CreateModel(
            name='TicketType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='类型名称')),
                ('description', models.TextField(blank=True, null=True, verbose_name='类型描述')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, verbose_name='是否激活')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_ticket_types', to='memoq_ticket_system.user', verbose_name='创建人')),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='memoq_ticket_system.tickettype', verbose_name='父类型')),
            ],
            options={
                'verbose_name': '工单类型',
                'verbose_name_plural': '工单类型',
            },
        ),
        migrations.CreateModel(
            name='TicketTransferHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.TextField(verbose_name='转移原因')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transfer_history', to='memoq_ticket_system.ticket', verbose_name='工单')),
                ('transferred_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transferred_tickets', to='memoq_ticket_system.user', verbose_name='转移人')),
                ('transferred_from', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transfers_from', to='memoq_ticket_system.user', verbose_name='原负责人')),
                ('transferred_to', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transfers_to', to='memoq_ticket_system.user', verbose_name='新负责人')),
            ],
            options={
                'verbose_name': '工单转移历史',
                'verbose_name_plural': '工单转移历史',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='TicketStatusHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('old_status', models.CharField(choices=[('new_issue', '新问题'), ('pending_assignment', '待分配'), ('in_progress', '处理中'), ('waiting_for_customer', '等待客户回复'), ('resolved', '已解决'), ('closed', '已关闭'), ('customer_follow_up', '追问'), ('paused', '暂停')], max_length=30, verbose_name='原状态')),
                ('new_status', models.CharField(choices=[('new_issue', '新问题'), ('pending_assignment', '待分配'), ('in_progress', '处理中'), ('waiting_for_customer', '等待客户回复'), ('resolved', '已解决'), ('closed', '已关闭'), ('customer_follow_up', '追问'), ('paused', '暂停')], max_length=30, verbose_name='新状态')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('reason', models.TextField(blank=True, null=True, verbose_name='变更原因')),
                ('changed_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='status_changes', to='memoq_ticket_system.user', verbose_name='变更人')),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='status_history', to='memoq_ticket_system.ticket', verbose_name='工单')),
            ],
            options={
                'verbose_name': '工单状态历史',
                'verbose_name_plural': '工单状态历史',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='TicketReply',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='内容')),
                ('is_internal', models.BooleanField(default=False, verbose_name='是否内部备注')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('email_sent', models.BooleanField(default=False, verbose_name='邮件已发送')),
                ('email_sent_at', models.DateTimeField(blank=True, null=True, verbose_name='邮件发送时间')),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='memoq_ticket_system.ticket', verbose_name='工单')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ticket_replies', to='memoq_ticket_system.user', verbose_name='回复人')),
            ],
            options={
                'verbose_name': '工单回复',
                'verbose_name_plural': '工单回复',
                'ordering': ['created_at'],
            },
        ),
        migrations.AddField(
            model_name='ticket',
            name='labels',
            field=models.ManyToManyField(blank=True, related_name='tickets', to='memoq_ticket_system.TicketLabel', verbose_name='工单标签'),
        ),
        migrations.AddField(
            model_name='ticket',
            name='submitted_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='submitted_tickets', to='memoq_ticket_system.user', verbose_name='提交人'),
        ),
        migrations.AddField(
            model_name='ticket',
            name='ticket_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tickets', to='memoq_ticket_system.tickettype', verbose_name='工单类型'),
        ),
        migrations.CreateModel(
            name='NotificationLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('email', '邮箱'), ('wechat', '微信'), ('enterprise_wechat', '企业微信'), ('feishu', '飞书'), ('webhook', 'Webhook')], max_length=30, verbose_name='通知类型')),
                ('content', models.TextField(verbose_name='内容')),
                ('status', models.CharField(choices=[('pending', '待发送'), ('sent', '已发送'), ('failed', '发送失败'), ('retry_failed', '重试失败')], default='pending', max_length=20, verbose_name='状态')),
                ('retry_attempts', models.IntegerField(default=0, verbose_name='重试次数')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('sent_at', models.DateTimeField(blank=True, null=True, verbose_name='发送时间')),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='webhook_notifications', to='memoq_ticket_system.company', verbose_name='公司')),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='memoq_ticket_system.ticket', verbose_name='工单')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='memoq_ticket_system.user', verbose_name='用户')),
            ],
            options={
                'verbose_name': '通知记录',
                'verbose_name_plural': '通知记录',
            },
        ),
        migrations.CreateModel(
            name='NotificationConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_enabled', models.BooleanField(default=True, verbose_name='启用邮件通知')),
                ('wechat_enabled', models.BooleanField(default=False, verbose_name='启用微信通知')),
                ('enterprise_wechat_enabled', models.BooleanField(default=False, verbose_name='启用企业微信通知')),
                ('feishu_enabled', models.BooleanField(default=False, verbose_name='启用飞书通知')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='notification_config', to='memoq_ticket_system.user', verbose_name='用户')),
            ],
            options={
                'verbose_name': '通知配置',
                'verbose_name_plural': '通知配置',
            },
        ),
        migrations.CreateModel(
            name='EmailTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('template_type', models.CharField(choices=[('ticket_created', '工单创建'), ('ticket_replied', '工单回复'), ('ticket_status_changed', '工单状态变更'), ('ticket_assigned', '工单分配'), ('ticket_followed', '工单关注')], max_length=50, verbose_name='模板类型')),
                ('subject_template', models.CharField(max_length=255, verbose_name='邮件主题模板')),
                ('body_template', models.TextField(verbose_name='邮件内容模板')),
                ('is_html', models.BooleanField(default=True, verbose_name='是否HTML格式')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否激活')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='email_templates', to='memoq_ticket_system.company', verbose_name='公司')),
            ],
            options={
                'verbose_name': '邮件模板',
                'verbose_name_plural': '邮件模板',
            },
        ),
        migrations.CreateModel(
            name='CompanyConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sla_level', models.CharField(choices=[('basic', '基础'), ('standard', '标准'), ('premium', '高级')], default='standard', max_length=20, verbose_name='SLA级别')),
                ('priority_level', models.IntegerField(default=3, verbose_name='优先级')),
                ('idle_timeout_minutes', models.IntegerField(default=1440, verbose_name='闲置超时(分钟)')),
                ('sla_response_minutes', models.IntegerField(default=240, verbose_name='SLA响应(分钟)')),
                ('sla_resolution_minutes', models.IntegerField(default=2880, verbose_name='SLA解决(分钟)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='config', to='memoq_ticket_system.company', verbose_name='公司')),
            ],
            options={
                'verbose_name': '公司配置',
                'verbose_name_plural': '公司配置',
            },
        ),
        migrations.AddField(
            model_name='company',
            name='customer_types',
            field=models.ManyToManyField(blank=True, to='memoq_ticket_system.CustomerTypeTag', verbose_name='客户类型'),
        ),
        migrations.CreateModel(
            name='Attachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_name', models.CharField(max_length=255, verbose_name='文件名')),
                ('file', models.FileField(upload_to='attachments/%Y/%m/%d/', verbose_name='文件')),
                ('file_size', models.IntegerField(verbose_name='文件大小(字节)')),
                ('file_type', models.CharField(max_length=100, verbose_name='文件类型')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('reply', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='memoq_ticket_system.ticketreply', verbose_name='关联回复')),
                ('ticket', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='memoq_ticket_system.ticket', verbose_name='关联工单')),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='uploaded_attachments', to='memoq_ticket_system.user', verbose_name='上传人')),
            ],
            options={
                'verbose_name': '附件',
                'verbose_name_plural': '附件',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='company',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='users', to='memoq_ticket_system.company', verbose_name='所属公司'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddIndex(
            model_name='webhooktemplate',
            index=models.Index(fields=['company', 'event_type'], name='memoq_ticke_company_6d65f0_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='webhooktemplate',
            unique_together={('company', 'event_type')},
        ),
        migrations.AddIndex(
            model_name='tickettransferhistory',
            index=models.Index(fields=['ticket'], name='memoq_ticke_ticket__21fefe_idx'),
        ),
        migrations.AddIndex(
            model_name='tickettransferhistory',
            index=models.Index(fields=['created_at'], name='memoq_ticke_created_143e4c_idx'),
        ),
        migrations.AddIndex(
            model_name='ticketstatushistory',
            index=models.Index(fields=['ticket'], name='memoq_ticke_ticket__8a3b49_idx'),
        ),
        migrations.AddIndex(
            model_name='ticketstatushistory',
            index=models.Index(fields=['created_at'], name='memoq_ticke_created_290c50_idx'),
        ),
        migrations.AddIndex(
            model_name='ticketreply',
            index=models.Index(fields=['ticket'], name='memoq_ticke_ticket__2dfa6e_idx'),
        ),
        migrations.AddIndex(
            model_name='ticketreply',
            index=models.Index(fields=['created_at'], name='memoq_ticke_created_8d6b0c_idx'),
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['company'], name='memoq_ticke_company_e0fe85_idx'),
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['created_by'], name='memoq_ticke_created_a32239_idx'),
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['submitted_by'], name='memoq_ticke_submitt_d1a582_idx'),
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['assigned_to'], name='memoq_ticke_assigne_424f88_idx'),
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['status'], name='memoq_ticke_status_71d9b0_idx'),
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['last_activity_at'], name='memoq_ticke_last_ac_0ed84c_idx'),
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['created_at'], name='memoq_ticke_created_02ea8b_idx'),
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['first_replied_at'], name='memoq_ticke_first_r_a9eb0a_idx'),
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['ticket_type'], name='memoq_ticke_ticket__eb2239_idx'),
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['ticket_url_slug'], name='memoq_ticke_ticket__355c1e_idx'),
        ),
        migrations.AddIndex(
            model_name='notificationlog',
            index=models.Index(fields=['user'], name='memoq_ticke_user_id_52a55b_idx'),
        ),
        migrations.AddIndex(
            model_name='notificationlog',
            index=models.Index(fields=['company'], name='memoq_ticke_company_ee8bd7_idx'),
        ),
        migrations.AddIndex(
            model_name='notificationlog',
            index=models.Index(fields=['ticket'], name='memoq_ticke_ticket__6f3a5b_idx'),
        ),
        migrations.AddIndex(
            model_name='notificationlog',
            index=models.Index(fields=['created_at'], name='memoq_ticke_created_855475_idx'),
        ),
        migrations.AddIndex(
            model_name='notificationlog',
            index=models.Index(fields=['status'], name='memoq_ticke_status_461af3_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='emailtemplate',
            unique_together={('company', 'template_type')},
        ),
        migrations.AddIndex(
            model_name='attachment',
            index=models.Index(fields=['ticket'], name='memoq_ticke_ticket__6ddf32_idx'),
        ),
        migrations.AddIndex(
            model_name='attachment',
            index=models.Index(fields=['reply'], name='memoq_ticke_reply_i_fe255e_idx'),
        ),
        migrations.AddIndex(
            model_name='attachment',
            index=models.Index(fields=['uploaded_by'], name='memoq_ticke_uploade_ee6d4b_idx'),
        ),
    ]
